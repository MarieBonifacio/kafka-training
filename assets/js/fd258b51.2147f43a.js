"use strict";(self.webpackChunkkafka_training=self.webpackChunkkafka_training||[]).push([[286],{5474:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"end-to-end-scenario","title":"Test bout \xe0 bout - Traitement de commandes Kafka","description":"Dans ce chapitre, nous testons un sc\xe9nario complet de bout en bout avec Kafka, simulant un traitement m\xe9tier r\xe9aliste.\\n","source":"@site/docs/07-end-to-end-scenario.md","sourceDirName":".","slug":"/07-scenario-bout-a-bout","permalink":"/kafka-training/docs/07-scenario-bout-a-bout","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07-end-to-end-scenario.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Test bout \xe0 bout - Traitement de commandes Kafka","slug":"07-scenario-bout-a-bout","description":"Dans ce chapitre, nous testons un sc\xe9nario complet de bout en bout avec Kafka, simulant un traitement m\xe9tier r\xe9aliste.\\n"},"sidebar":"tutorialSidebar","previous":{"title":"Tester la r\xe9silience \xe0 la d\xe9s\xe9rialisation JSON","permalink":"/kafka-training/docs/06-tester-resilience-deserialisation"}}');var i=r(4848),s=r(8453);const o={title:"Test bout \xe0 bout - Traitement de commandes Kafka",slug:"07-scenario-bout-a-bout",description:"Dans ce chapitre, nous testons un sc\xe9nario complet de bout en bout avec Kafka, simulant un traitement m\xe9tier r\xe9aliste.\n"},a=void 0,c={},u=[{value:"\ud83c\udfaf Objectif",id:"-objectif",level:2},{value:"\ud83e\uddf1 Structure m\xe9tier",id:"-structure-m\xe9tier",level:2},{value:"\ud83e\uddea Test complet JUnit",id:"-test-complet-junit",level:2},{value:"\u2705 R\xe9sultat attendu",id:"-r\xe9sultat-attendu",level:2},{value:"\ud83c\udfc1 Prochain chapitre",id:"-prochain-chapitre",level:2}];function d(e){const n={code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-objectif",children:"\ud83c\udfaf Objectif"}),"\n",(0,i.jsx)(n.p,{children:"Ce chapitre met en place un sc\xe9nario Kafka complet :"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Envoi d\u2019un objet m\xe9tier ",(0,i.jsx)(n.code,{children:"Order"})," en JSON"]}),"\n",(0,i.jsx)(n.li,{children:"Consommation et traitement logique m\xe9tier"}),"\n",(0,i.jsx)(n.li,{children:"R\xe9\xe9mission du message modifi\xe9 dans un second topic"}),"\n",(0,i.jsx)(n.li,{children:"V\xe9rification de bout en bout via un test JUnit"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-structure-m\xe9tier",children:"\ud83e\uddf1 Structure m\xe9tier"}),"\n",(0,i.jsxs)(n.p,{children:["Nous utilisons la classe ",(0,i.jsx)(n.code,{children:"Order"})," suivante :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class Order {\n    public String id;\n    public double amount;\n    public String status;\n\n    public Order() {} // requis pour Jackson\n\n    public Order(String id, double amount, String status) {\n        this.id = id;\n        this.amount = amount;\n        this.status = status;\n    }\n\n    @Override\n    public String toString() {\n        return "Order{id=\'" + id + "\', amount=" + amount + ", status=\'" + status + "\'}";\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-test-complet-junit",children:"\ud83e\uddea Test complet JUnit"}),"\n",(0,i.jsx)(n.p,{children:"Le test suivant envoie une commande, applique une logique m\xe9tier, et v\xe9rifie que la commande est trait\xe9e correctement."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Testcontainers\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class KafkaOrderProcessingTest {\n\n    private static final Logger log = LoggerFactory.getLogger(KafkaOrderProcessingTest.class);\n    private static final ObjectMapper objectMapper = new ObjectMapper();\n\n    private KafkaContainer kafka;\n    private String bootstrapServers;\n\n    @BeforeEach\n    void startKafka() {\n        kafka = new KafkaContainer(\n            DockerImageName.parse("confluentinc/cp-kafka:7.2.1")\n                           .asCompatibleSubstituteFor("apache/kafka")\n        );\n        kafka.start();\n        bootstrapServers = kafka.getBootstrapServers();\n    }\n\n    @AfterEach\n    void stopKafka() {\n        kafka.stop();\n    }\n\n    @Test\n    void testOrderProcessingFlow() throws Exception {\n        String inputTopic = "order-input";\n        String outputTopic = "order-processed";\n\n        // \xc9tape 1 : envoi de l\u2019Order\n        Order order = new Order("ORDER-001", 150.0, "NEW");\n        String orderJson = objectMapper.writeValueAsString(order);\n        log.info("\ud83d\udd04 Envoi initial de l\'Order : {}", orderJson);\n\n        Properties prodProps = new Properties();\n        prodProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        prodProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        prodProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n        try (Producer<String, String> producer = new KafkaProducer<>(prodProps)) {\n            producer.send(new ProducerRecord<>(inputTopic, order.id, orderJson)).get();\n            log.info("\u2705 Order envoy\xe9 dans le topic \'{}\'", inputTopic);\n        }\n\n        // \xc9tape 2 : Consommation + traitement m\xe9tier\n        Properties consumerProps = new Properties();\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");\n        consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, "order-processing-group-" + UUID.randomUUID());\n        consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n\n        try (\n            Consumer<String, String> consumer = new KafkaConsumer<>(consumerProps);\n            Producer<String, String> outputProducer = new KafkaProducer<>(prodProps)\n        ) {\n            consumer.subscribe(List.of(inputTopic));\n\n            Awaitility.await().atMost(10, TimeUnit.SECONDS).untilAsserted(() -> {\n                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(500));\n                assertFalse(records.isEmpty(), "Aucun message re\xe7u dans le topic d\'entr\xe9e");\n\n                for (ConsumerRecord<String, String> record : records) {\n                    Order received = objectMapper.readValue(record.value(), Order.class);\n                    log.info("\ud83d\udce5 Message re\xe7u : {}", received);\n\n                    received.status = received.amount > 100 ? "ALERT" : "OK";\n\n                    String modifiedOrderJson = objectMapper.writeValueAsString(received);\n                    outputProducer.send(new ProducerRecord<>(outputTopic, received.id, modifiedOrderJson)).get();\n                    log.info("\u2705 Order modifi\xe9 envoy\xe9 dans le topic \'{}\'", outputTopic);\n                }\n            });\n        }\n\n        // \xc9tape 3 : v\xe9rification finale\n        try (Consumer<String, String> finalConsumer = new KafkaConsumer<>(consumerProps)) {\n            finalConsumer.subscribe(List.of(outputTopic));\n\n            Awaitility.await().atMost(10, TimeUnit.SECONDS).untilAsserted(() -> {\n                ConsumerRecords<String, String> records = finalConsumer.poll(Duration.ofMillis(500));\n                assertFalse(records.isEmpty(), "Aucun message re\xe7u dans le topic de sortie");\n\n                for (ConsumerRecord<String, String> record : records) {\n                    Order received = objectMapper.readValue(record.value(), Order.class);\n                    log.info("\ud83d\udd0e Message final re\xe7u : {}", received);\n                    assertTrue(\n                        received.status.equals("ALERT") || received.status.equals("OK"),\n                        "Le statut de l\'Order doit \xeatre ALERT ou OK"\n                    );\n                }\n            });\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-r\xe9sultat-attendu",children:"\u2705 R\xe9sultat attendu"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Si le montant est ",(0,i.jsx)(n.strong,{children:"> 100"}),", le ",(0,i.jsx)(n.code,{children:"status"})," devient ",(0,i.jsx)(n.code,{children:'"ALERT"'}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Sinon, il reste ",(0,i.jsx)(n.code,{children:'"OK"'}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-prochain-chapitre",children:"\ud83c\udfc1 Prochain chapitre"}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 Modularisation en services r\xe9utilisables : ",(0,i.jsx)(n.code,{children:"OrderProducerService"}),", ",(0,i.jsx)(n.code,{children:"OrderProcessingService"}),", etc."]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);