"use strict";(self.webpackChunkkafka_training=self.webpackChunkkafka_training||[]).push([[5251],{51:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"setup-local-kafka","title":"Mise en place de Kafka avec Testcontainers","description":"Dans ce chapitre, nous allons cr\xe9er notre premier test Kafka sans aucun cluster r\xe9el, uniquement gr\xe2ce \xe0 Testcontainers.","source":"@site/docs/01-setup-local-kafka.md","sourceDirName":".","slug":"/setup-local-kafka","permalink":"/kafka-training/docs/setup-local-kafka","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/01-setup-local-kafka.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Mise en place de Kafka avec Testcontainers"},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/kafka-training/docs/intro"},"next":{"title":"S\xe9parer Producteur et Consommateur Kafka","permalink":"/kafka-training/docs/producer-consumer-separation"}}');var a=r(4848),s=r(8453);const i={title:"Mise en place de Kafka avec Testcontainers"},o="\ud83d\udee0\ufe0f Setup Kafka local avec Testcontainers",c={},u=[{value:"\ud83d\udd0d Pourquoi Testcontainers ?",id:"-pourquoi-testcontainers-",level:2},{value:"\ud83d\udce6 D\xe9pendances Maven \xe0 ajouter",id:"-d\xe9pendances-maven-\xe0-ajouter",level:2},{value:"\ud83d\udc33 Lancer un conteneur Kafka",id:"-lancer-un-conteneur-kafka",level:2},{value:"\ud83d\udd2c Structure de d\xe9part du test",id:"-structure-de-d\xe9part-du-test",level:2},{value:"\ud83d\udccc Ce que tu as appris ici",id:"-ce-que-tu-as-appris-ici",level:2}];function l(e){const n={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"\ufe0f-setup-kafka-local-avec-testcontainers",children:"\ud83d\udee0\ufe0f Setup Kafka local avec Testcontainers"})}),"\n",(0,a.jsxs)(n.p,{children:["Dans ce chapitre, nous allons cr\xe9er notre premier test Kafka ",(0,a.jsx)(n.strong,{children:"sans aucun cluster r\xe9el"}),", uniquement gr\xe2ce \xe0 ",(0,a.jsx)(n.strong,{children:"Testcontainers"}),"."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-pourquoi-testcontainers-",children:"\ud83d\udd0d Pourquoi Testcontainers ?"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Testcontainers permet de lancer des conteneurs Docker (comme Kafka) \xe0 la vol\xe9e pendant les tests JUnit."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["\u2714\ufe0f Tu \xe9vites les d\xe9pendances r\xe9seau",(0,a.jsx)(n.br,{}),"\n","\u2714\ufe0f Tu t\u2019assures que chaque test est isol\xe9 et jetable",(0,a.jsx)(n.br,{}),"\n","\u2714\ufe0f Tu peux int\xe9grer Kafka facilement dans n\u2019importe quel pipeline CI/CD"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-d\xe9pendances-maven-\xe0-ajouter",children:"\ud83d\udce6 D\xe9pendances Maven \xe0 ajouter"}),"\n",(0,a.jsxs)(n.p,{children:["Dans ton ",(0,a.jsx)(n.code,{children:"pom.xml"})," :"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:"<dependencies>\n  \x3c!-- Kafka client --\x3e\n  <dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka-clients</artifactId>\n    <version>3.4.0</version>\n  </dependency>\n\n  \x3c!-- JUnit 5 --\x3e\n  <dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter</artifactId>\n    <version>5.9.2</version>\n    <scope>test</scope>\n  </dependency>\n\n  \x3c!-- Testcontainers Kafka --\x3e\n  <dependency>\n    <groupId>org.testcontainers</groupId>\n    <artifactId>kafka</artifactId>\n    <version>1.19.0</version>\n    <scope>test</scope>\n  </dependency>\n\n  \x3c!-- Awaitility pour attendre proprement les messages --\x3e\n  <dependency>\n    <groupId>org.awaitility</groupId>\n    <artifactId>awaitility</artifactId>\n    <version>4.2.0</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-lancer-un-conteneur-kafka",children:"\ud83d\udc33 Lancer un conteneur Kafka"}),"\n",(0,a.jsxs)(n.p,{children:["Voici comment d\xe9marrer un conteneur Kafka avec Testcontainers :\nDans ton ",(0,a.jsx)(n.code,{children:"kafkaIntegrationTest.java"})," :"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// D\xe9finit le package Java dans lequel se trouve la classe. Cela permet d'organiser les classes de mani\xe8re logique.\npackage com.example.kafka;\n\nimport org.apache.kafka.clients.consumer.*;\nimport org.apache.kafka.clients.producer.*;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\n// Annotation @test pour indiquer que c'est un test d'int\xe9gration \nimport org.junit.jupiter.api.Test;\n// Classe utilitaire fournie par Testcontaiers pour lancer Kafka avec avec une conf pr\xeate \xe0 l'emploi\nimport org.testcontainers.containers.KafkaContainer;\n//  Int\xe9gration entre Testcontainers et JUnit 5 : @Testcontainers permet de g\xe9rer automatiquement le cycle de vie des conteneurs marqu\xe9s @Container.\nimport org.testcontainers.junit.jupiter.Container;\nimport org.testcontainers.junit.jupiter.Testcontainers;\n// Permet de parser le nom d'une image docker et de d\xe9clarer une compatibilit\xe9 entre images\nimport org.testcontainers.utility.DockerImageName;\nimport org.awaitility.Awaitility;\n\n// Permets d'utiliser assertTrue pour valider qu'un test passe (v\xe9rifie ici que le conteneur kafka ets bien lanc\xe9)\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.time.Duration;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n// D\xe9marre un test avec JUnit 5\n// void : indique que la m\xe9thode ne retourne rien\nvoid testKafkaContainerStarts() {\n        // D\xe9marre le conteneur Kafka\n        kafka.start();\n        // V\xe9rifie que le conteneur Kafka est bien d\xe9marr\xe9\n        // assertTrue : m\xe9thode de JUnit qui v\xe9rifie que la condition est vraie\n        assertTrue(kafka.isRunning(), \"Kafka n'est pas d\xe9marr\xe9 !\");\n        // Affiche l'adresse du serveur Kafka dans la console \n        // System.out.println : m\xe9thode Java pour afficher un message dans la console\n        System.out.println(\"Kafka bootstrap server: \" + kafka.getBootstrapServers());\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-structure-de-d\xe9part-du-test",children:"\ud83d\udd2c Structure de d\xe9part du test"}),"\n",(0,a.jsx)(n.p,{children:"Voici un test fonctionnel qui d\xe9marre un Kafka avec Testcontainers, envoie un message dans un topic et v\xe9rifie sa r\xe9ception :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Testcontainers\npublic class KafkaIntegrationTest {\n\n  @Container\n  static KafkaContainer kafka = new KafkaContainer(\n      DockerImageName.parse("confluentinc/cp-kafka:7.2.1")\n                     .asCompatibleSubstituteFor("apache/kafka")\n  );\n\n  @Test\n  void testKafkaProducerConsumer() {\n    String topic = "test-topic";\n\n    // Configuration Producteur\n    Properties producerProps = new Properties();\n    producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\n    producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n    producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n    Producer<String, String> producer = new KafkaProducer<>(producerProps);\n    producer.send(new ProducerRecord<>(topic, "key", "value"));\n    producer.flush();\n    producer.close();\n\n    // Configuration Consommateur\n    Properties consumerProps = new Properties();\n    consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\n    consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, "test-group");\n    consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");\n    consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n    consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n\n    Consumer<String, String> consumer = new KafkaConsumer<>(consumerProps);\n    consumer.subscribe(Collections.singletonList(topic));\n\n    Awaitility.await()\n              .atMost(10, TimeUnit.SECONDS)\n              .pollInterval(Duration.ofMillis(500))\n              .untilAsserted(() -> {\n                  ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));\n                  assertFalse(records.isEmpty());\n                  for (ConsumerRecord<String, String> record : records) {\n                      assertEquals("key", record.key());\n                      assertEquals("value", record.value());\n                  }\n              });\n\n    consumer.close();\n  }\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-ce-que-tu-as-appris-ici",children:"\ud83d\udccc Ce que tu as appris ici"}),"\n",(0,a.jsxs)(n.p,{children:["\u2714\ufe0f D\xe9marrer un Kafka local \xe0 la vol\xe9e",(0,a.jsx)(n.br,{}),"\n","\u2714\ufe0f Envoyer et recevoir un message",(0,a.jsx)(n.br,{}),"\n","\u2714\ufe0f Tester l'ensemble sans aucune infrastructure externe"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);