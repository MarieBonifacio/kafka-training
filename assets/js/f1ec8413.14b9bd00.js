"use strict";(self.webpackChunkkafka_training=self.webpackChunkkafka_training||[]).push([[208],{3779:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"05-modeliser-objet-imbrique","title":"Mod\xe9liser un objet m\xe9tier imbriqu\xe9 en JSON","description":"Apprendre \xe0 tester Kafka avec des objets Java complexes s\xe9rialis\xe9s manuellement en JSON via Jackson","source":"@site/docs/05-Modeliser-objet-imbriqu\xe9.md","sourceDirName":".","slug":"/05-modeliser-objet-imbrique","permalink":"/kafka-training/docs/05-modeliser-objet-imbrique","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/05-Modeliser-objet-imbriqu\xe9.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"05-modeliser-objet-imbrique","title":"Mod\xe9liser un objet m\xe9tier imbriqu\xe9 en JSON","description":"Apprendre \xe0 tester Kafka avec des objets Java complexes s\xe9rialis\xe9s manuellement en JSON via Jackson"},"sidebar":"tutorialSidebar","previous":{"title":"Envoi d\'objets m\xe9tier en JSON","permalink":"/kafka-training/docs/04-envoi-objets-metier-JSON"},"next":{"title":"Tester la r\xe9silience \xe0 la d\xe9s\xe9rialisation JJSON","permalink":"/kafka-training/docs/deserialization-resilience"}}');var t=s(4848),i=s(8453);const a={id:"05-modeliser-objet-imbrique",title:"Mod\xe9liser un objet m\xe9tier imbriqu\xe9 en JSON",description:"Apprendre \xe0 tester Kafka avec des objets Java complexes s\xe9rialis\xe9s manuellement en JSON via Jackson"},o="\ud83e\udde9 Mod\xe9liser un objet m\xe9tier imbriqu\xe9 et le tester dans Kafka",d={},c=[{value:"\ud83c\udfaf Objectif de cette \xe9tape",id:"-objectif-de-cette-\xe9tape",level:2},{value:"\ud83e\uddf1 Contexte",id:"-contexte",level:2},{value:"\ud83e\uddf1 Pourquoi des objets imbriqu\xe9s ?",id:"-pourquoi-des-objets-imbriqu\xe9s-",level:2},{value:"\ud83e\uddf0 \xc9tape 1 \u2014 Cr\xe9ation de la classe <code>Address</code> et mise \xe0 jour de a classe <code>Person</code>",id:"-\xe9tape-1--cr\xe9ation-de-la-classe-address-et-mise-\xe0-jour-de-a-classe-person",level:2},{value:"\ud83d\udcc4 <code>Address.java</code>",id:"-addressjava",level:3},{value:"\ud83d\udcc4 <code>Person.java</code>",id:"-personjava",level:3},{value:"\ud83e\uddf0 \xc9tape 2 \u2014 Producteur Kafka avec Jackson",id:"-\xe9tape-2--producteur-kafka-avec-jackson",level:2},{value:"\ud83d\udcc4 KafkaProducerServicePerson.java",id:"-kafkaproducerservicepersonjava",level:3},{value:"\ud83e\uddf0 \xc9tape 3 \u2014 Test Kafka avec structure imbriqu\xe9e",id:"-\xe9tape-3--test-kafka-avec-structure-imbriqu\xe9e",level:2},{value:"\ud83d\udcc4 KafkaIntegrationTestPerson.java",id:"-kafkaintegrationtestpersonjava",level:3},{value:"\ud83e\uddf0 \xc9tape 4 \u2014 Envoi de plusieurs objets Person (batch Kafka)",id:"-\xe9tape-4--envoi-de-plusieurs-objets-person-batch-kafka",level:2},{value:"\ud83d\udcc4 Utilisation de la m\xe9thode <code>sendBatch(...)</code>",id:"-utilisation-de-la-m\xe9thode-sendbatch",level:3},{value:"\ud83e\uddea Test d&#39;int\xe9gration : testKafkaBatchJsonObjects()",id:"-test-dint\xe9gration--testkafkabatchjsonobjects",level:3},{value:"\u2705 Ce que tu as appris ici",id:"-ce-que-tu-as-appris-ici",level:2},{value:"\ud83d\udcda \xc0 suivre",id:"-\xe0-suivre",level:2}];function l(e){const n={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-mod\xe9liser-un-objet-m\xe9tier-imbriqu\xe9-et-le-tester-dans-kafka",children:"\ud83e\udde9 Mod\xe9liser un objet m\xe9tier imbriqu\xe9 et le tester dans Kafka"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-objectif-de-cette-\xe9tape",children:"\ud83c\udfaf Objectif de cette \xe9tape"}),"\n",(0,t.jsx)(n.p,{children:"Dans cette section, on va apprendre \xe0 :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Cr\xe9er un ",(0,t.jsx)(n.strong,{children:"objet m\xe9tier Java avec une structure imbriqu\xe9e"})]}),"\n",(0,t.jsxs)(n.li,{children:["Le ",(0,t.jsx)(n.strong,{children:"s\xe9rialiser en JSON"})," via Jackson"]}),"\n",(0,t.jsxs)(n.li,{children:["L\u2019envoyer dans un ",(0,t.jsx)(n.strong,{children:"topic Kafka via un Producer personnalis\xe9"})]}),"\n",(0,t.jsxs)(n.li,{children:["Cr\xe9er une liste d\u2019objets ",(0,t.jsx)(n.code,{children:"Person"})]}),"\n",(0,t.jsxs)(n.li,{children:["Les envoyer tous dans un ",(0,t.jsx)(n.strong,{children:"seul topic Kafka"})]}),"\n",(0,t.jsxs)(n.li,{children:["Les consommer ",(0,t.jsx)(n.strong,{children:"dans l\u2019ordre"})]}),"\n",(0,t.jsx)(n.li,{children:"V\xe9rifier le contenu de chaque message re\xe7u"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Cela nous permet de manipuler des flux ",(0,t.jsx)(n.strong,{children:"plus r\xe9alistes"}),", proches de ceux utilis\xe9s dans les microservices ou syst\xe8mes m\xe9tier."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-contexte",children:"\ud83e\uddf1 Contexte"}),"\n",(0,t.jsxs)(n.p,{children:["Dans l\u2019\xe9tape pr\xe9c\xe9dente (",(0,t.jsx)(n.code,{children:"04-envoi-objets-metier-JSON"}),"), nous avons appris \xe0 :"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Cr\xe9er un POJO ",(0,t.jsx)(n.code,{children:"Person"})]}),"\n",(0,t.jsx)(n.li,{children:"L\u2019envoyer en JSON avec Kafka"}),"\n",(0,t.jsx)(n.li,{children:"Le consommer et le d\xe9s\xe9rialiser dans un test"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Mais l\u2019objet ",(0,t.jsx)(n.code,{children:"Person"})," n\u2019avait que des champs simples (primitives : ",(0,t.jsx)(n.code,{children:"String"}),", ",(0,t.jsx)(n.code,{children:"int"}),")."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Dans le r\xe9el, les objets Kafka contiennent souvent ",(0,t.jsx)(n.strong,{children:"des sous-objets imbriqu\xe9s"})," (adresse, statut, m\xe9tadonn\xe9es, etc.). Nous allons apprendre \xe0 les g\xe9rer ici."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-pourquoi-des-objets-imbriqu\xe9s-",children:"\ud83e\uddf1 Pourquoi des objets imbriqu\xe9s ?"}),"\n",(0,t.jsx)(n.p,{children:"Dans des syst\xe8mes r\xe9els, les objets m\xe9tier contiennent souvent des sous-objets. Par exemple :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Une commande peut contenir une liste de produits."}),"\n",(0,t.jsx)(n.li,{children:"Un utilisateur peut avoir une adresse."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Les objets imbriqu\xe9s permettent de mod\xe9liser ces relations complexes de mani\xe8re naturelle."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"-\xe9tape-1--cr\xe9ation-de-la-classe-address-et-mise-\xe0-jour-de-a-classe-person",children:["\ud83e\uddf0 \xc9tape 1 \u2014 Cr\xe9ation de la classe ",(0,t.jsx)(n.code,{children:"Address"})," et mise \xe0 jour de a classe ",(0,t.jsx)(n.code,{children:"Person"})]}),"\n",(0,t.jsxs)(n.h3,{id:"-addressjava",children:["\ud83d\udcc4 ",(0,t.jsx)(n.code,{children:"Address.java"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"package com.example.kafka.model;\n\npublic class Address {\n    private String street;\n    private String city;\n    private String state;\n    private String zipCode;\n\n    public Address() {}\n\n    public Address(String street, String city, String state, String zipCode) {\n        this.street = street;\n        this.city = city;\n        this.state = state;\n        this.zipCode = zipCode;\n    }\n\n    public String getStreet() {\n        return street;\n    }\n\n    public void setStreet(String street) {\n        this.street = street;\n    }\n\n    public String getCity() {\n        return city;\n    }\n\n    public void setCity(String city) {\n        this.city = city;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n    }\n\n    public String getZip() {\n        return zipCode;\n    }\n\n    public void setZip(String zip) {\n        this.zipCode = zip;\n    }\n\n    @Override\n    public String toString() {\n        return \"Address{\" +\n                \"street='\" + street + '\\'' +\n                \", city='\" + city + '\\'' +\n                \", state='\" + state + '\\'' +\n                \", zipCode='\" + zipCode + '\\'' +\n                '}';\n    }\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"-personjava",children:["\ud83d\udcc4 ",(0,t.jsx)(n.code,{children:"Person.java"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package com.example.kafka.model;\npublic class Person {\n    private String name;\n    private int age;\n    private Address address;\n\n    public Person() {}\n\n    public Person(String name, int age, Address address) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public Address getAddress() {\n        return address;\n    }\n\n    public void setAddress(Address address) {\n        this.address = address;\n    }\n\n    @Override\n    public String toString() {\n        return "Person{" +\n                "name=\'" + name + \'\\\'\' +\n                ", age=" + age +\n                ", address=" + address +\n                \'}\';\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\xe9tape-2--producteur-kafka-avec-jackson",children:"\ud83e\uddf0 \xc9tape 2 \u2014 Producteur Kafka avec Jackson"}),"\n",(0,t.jsx)(n.p,{children:"Nous rempla\xe7ons le KafkaJsonSchemaSerializer (Confluent) par une s\xe9rialisation manuelle via Jackson, plus l\xe9g\xe8re et suffisante dans un test local."}),"\n",(0,t.jsx)(n.h3,{id:"-kafkaproducerservicepersonjava",children:"\ud83d\udcc4 KafkaProducerServicePerson.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"package com.example.kafka.service;\n\nimport com.example.kafka.model.Person;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.apache.kafka.clients.producer.*;\nimport org.apache.kafka.common.serialization.StringSerializer;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\npublic class KafkaProducerServicePerson {\n    private final String bootstrapServers;\n    private final ObjectMapper objectMapper = new ObjectMapper();\n\n    public KafkaProducerServicePerson(String bootstrapServers) {\n        this.bootstrapServers = bootstrapServers;\n    }\n\n    public void send(String topic, String key, Person person) {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n        try (Producer<String, String> producer = new KafkaProducer<>(props)) {\n            String json = objectMapper.writeValueAsString(person);\n            producer.send(new ProducerRecord<>(topic, key, json));\n            producer.flush();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\xe9tape-3--test-kafka-avec-structure-imbriqu\xe9e",children:"\ud83e\uddf0 \xc9tape 3 \u2014 Test Kafka avec structure imbriqu\xe9e"}),"\n",(0,t.jsx)(n.h3,{id:"-kafkaintegrationtestpersonjava",children:"\ud83d\udcc4 KafkaIntegrationTestPerson.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid testKafkaProducerWithPersonAndAddress() {\n    String topic = "test-person-address";\n    String key = "person1";\n\n    Address address = new Address("42 rue des Tests", "Lille", "59000");\n    Person person = new Person("L\xe9a", 29, address);\n\n    KafkaProducerServicePerson producer = new KafkaProducerServicePerson(kafka.getBootstrapServers());\n    producer.send(topic, key, person);\n\n    // Consumer configur\xe9 pour recevoir du texte brut JSON\n    Properties props = new Properties();\n    props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\n    props.put(ConsumerConfig.GROUP_ID_CONFIG, "group-person-address");\n    props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");\n    props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n    props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n\n    Consumer<String, String> consumer = new KafkaConsumer<>(props);\n    consumer.subscribe(Collections.singletonList(topic));\n\n    Awaitility.await()\n        .atMost(10, TimeUnit.SECONDS)\n        .pollInterval(Duration.ofMillis(500))\n        .untilAsserted(() -> {\n            ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(500));\n            assertFalse(records.isEmpty(), "Aucun message re\xe7u");\n\n            for (ConsumerRecord<String, String> record : records) {\n                ObjectMapper mapper = new ObjectMapper();\n                Person received = mapper.readValue(record.value(), Person.class);\n\n                assertEquals(person.getName(), received.getName());\n                assertEquals(person.getAddress().getCity(), received.getAddress().getCity());\n            }\n        });\n\n    consumer.close();\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\xe9tape-4--envoi-de-plusieurs-objets-person-batch-kafka",children:"\ud83e\uddf0 \xc9tape 4 \u2014 Envoi de plusieurs objets Person (batch Kafka)"}),"\n",(0,t.jsxs)(n.p,{children:["Apr\xe8s avoir valid\xe9 l\u2019envoi d\u2019un seul objet ",(0,t.jsx)(n.code,{children:"Person"})," avec une ",(0,t.jsx)(n.code,{children:"Address"}),", nous allons tester l\u2019envoi ",(0,t.jsx)(n.strong,{children:"de plusieurs objets JSON"})," dans un m\xeame topic Kafka.",(0,t.jsx)(n.br,{}),"\n","Cela simule un cas fr\xe9quent de traitement de batch dans les architectures orient\xe9es \xe9v\xe9nements."]}),"\n",(0,t.jsxs)(n.h3,{id:"-utilisation-de-la-m\xe9thode-sendbatch",children:["\ud83d\udcc4 Utilisation de la m\xe9thode ",(0,t.jsx)(n.code,{children:"sendBatch(...)"})]}),"\n",(0,t.jsxs)(n.p,{children:["Dans ",(0,t.jsx)(n.code,{children:"KafkaProducerServicePerson.java"}),", nous avons d\xe9fini une m\xe9thode ",(0,t.jsx)(n.code,{children:"sendBatch(...)"})," :"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public void sendBatch(String topic, List<Map.Entry<String, Person>> messages) {\n    Properties props = new Properties();\n    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n    props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n    try (Producer<String, String> producer = new KafkaProducer<>(props)) {\n        for (Map.Entry<String, Person> entry : messages) {\n            String json = objectMapper.writeValueAsString(entry.getValue());\n            producer.send(new ProducerRecord<>(topic, entry.getKey(), json));\n        }\n        producer.flush();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Cette m\xe9thode s\xe9rialise chaque objet Person en JSON avant de l\u2019envoyer."}),"\n",(0,t.jsx)(n.h3,{id:"-test-dint\xe9gration--testkafkabatchjsonobjects",children:"\ud83e\uddea Test d'int\xe9gration : testKafkaBatchJsonObjects()"}),"\n",(0,t.jsx)(n.p,{children:"Dans KafkaIntegrationTestPerson.java, nous ajoutons un test pour valider la r\xe9ception de plusieurs objets envoy\xe9s :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:' @Test\n    void testKafkaProducerWithPersonAndAddress() {\n        System.out.println("\ud83d\ude80 D\xe9marrage du test Kafka avec plusieurs personnes imbriqu\xe9es...");\n\n        String topic = "test-btch-JSON";\n        System.out.println("\ud83d\udee0\ufe0f Cr\xe9ation du producteur Kafka...");\n        KafkaProducerServicePerson producer = new KafkaProducerServicePerson(kafka.getBootstrapServers());\n\n        System.out.println("\ud83d\udccb Pr\xe9paration des donn\xe9es \xe0 envoyer...");\n        List<Map.Entry<String, Person>> persons = List.of(\n                Map.entry("key1", new Person("John Doe", 30, new Address("123 Main St", "Springfield", "IL", "62701"))),\n                Map.entry("key2", new Person("Jane Smith", 25, new Address("456 Elm St", "Springfield", "IL", "62702"))),\n                Map.entry("key3", new Person("Alice Johnson", 28, new Address("789 Oak St", "Springfield", "IL", "62703")))\n        );\n\n        System.out.println("\ud83d\udce4 Envoi des messages au topic Kafka : " + topic);\n        producer.sendBatch(topic, persons);\n\n        System.out.println("\u2699\ufe0f Configuration du consommateur Kafka...");\n        Properties props = new Properties();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, "test-group");\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n\n        Consumer<String, String> consumer = new KafkaConsumer<>(props);\n        consumer.subscribe(Collections.singletonList(topic));\n        System.out.println("\ud83d\udce1 Consommateur Kafka abonn\xe9 au topic : " + topic);\n\n        System.out.println("\u23f3 Attente des messages dans le topic...");\n        Awaitility.await()\n        .atMost(10, TimeUnit.SECONDS)\n        .pollInterval(Duration.ofMillis(500))\n        .untilAsserted(() -> {\n            ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(500));\n            assertEquals(3, records.count(), "\u274c Nombre de messages incorrect !");\n            System.out.println("\u2705 Messages re\xe7us : " + records.count());\n\n            ObjectMapper mapper = new ObjectMapper();\n            int index = 0;\n            for (ConsumerRecord<String, String> record : records) {\n                System.out.println("\ud83d\udce5 Traitement du message re\xe7u avec cl\xe9 : " + record.key());\n                Person expected = persons.get(index).getValue();\n                Person received = mapper.readValue(record.value(), Person.class);\n\n                System.out.println("\ud83d\udd0d Validation des donn\xe9es du message...");\n                assertEquals(expected.getName(), received.getName(), "\u274c Le nom ne correspond pas !");\n                assertEquals(expected.getAddress().getCity(), received.getAddress().getCity(), "\u274c La ville ne correspond pas !");\n                assertEquals(expected.getAddress().getStreet(), received.getAddress().getStreet(), "\u274c La rue ne correspond pas !");\n                assertEquals(expected.getAddress().getState(), received.getAddress().getState(), "\u274c L\'\xe9tat ne correspond pas !");\n                assertEquals(expected.getAddress().getZip(), received.getAddress().getZip(), "\u274c Le code postal ne correspond pas !");\n                System.out.println("\ud83c\udf89 Validation r\xe9ussie pour le message avec cl\xe9 : " + record.key());\n                index++;\n            }\n        });\n\n        consumer.close();\n        System.out.println("\ud83c\udfc1 Fin du test Kafka !");\n    }\n'})}),"\n",(0,t.jsx)(n.p,{children:"Commande pour relancer les tests :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mvn clean test -Dtest=KafkaIntegrationTestPerson\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u2705 Ce que ce test permet de valider\n\u2714\ufe0f Envoi multiple de messages JSON dans un topic Kafka\n\u2714\ufe0f R\xe9ception compl\xe8te des messages dans un test automatis\xe9\n\u2714\ufe0f D\xe9s\xe9rialisation et validation de chaque objet m\xe9tier\n\u2714\ufe0f Simulation d\u2019un comportement r\xe9aliste en production"}),"\n",(0,t.jsx)(n.h2,{id:"-ce-que-tu-as-appris-ici",children:"\u2705 Ce que tu as appris ici"}),"\n",(0,t.jsxs)(n.p,{children:["\u2714\ufe0f Comment mod\xe9liser une structure de donn\xe9es imbriqu\xe9e c\xf4t\xe9 Java",(0,t.jsx)(n.br,{}),"\n","\u2714\ufe0f Comment la convertir en JSON pour Kafka (sans d\xe9pendance complexe)",(0,t.jsx)(n.br,{}),"\n","\u2714\ufe0f Comment l\u2019envoyer dans un topic Kafka depuis un test\n\u2714\ufe0f Comment la retransformer en objet Java pour valider son contenu"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-\xe0-suivre",children:"\ud83d\udcda \xc0 suivre"}),"\n",(0,t.jsx)(n.p,{children:"Gestion d\u2019erreurs de d\xe9s\xe9rialisation (ex : champ manquant ou type invalide)"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);